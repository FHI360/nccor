angular.module("ui.slider",[]).value("uiSliderConfig",{}).directive("uiSlider",["uiSliderConfig","$timeout",function(e,t){e=e||{};return{require:"ngModel",compile:function(){return function(n,r,i,s){function o(e,t){return t?parseFloat(e):parseInt(e)}function h(){r.slider("destroy")}var u=angular.extend(n.$eval(i.uiSlider)||{},e);var a={min:null,max:null};var f=["min","max","step"];var l=!angular.isUndefined(i.useDecimals)?true:false;var c=function(){if(angular.isArray(s.$viewValue)&&u.range!==true){console.warn("Change your range option of ui-slider. When assigning ngModel an array of values then the range option should be set to true.");u.range=true}angular.forEach(f,function(e){if(angular.isDefined(i[e])){u[e]=o(i[e],l)}});r.slider(u);c=angular.noop};angular.forEach(f,function(e){i.$observe(e,function(t){if(!!t){c();r.slider("option",e,o(t,l));s.$render()}})});i.$observe("disabled",function(e){c();r.slider("option","disabled",!!e)});n.$watch(i.uiSlider,function(e){c();if(e!=undefined){r.slider("option",e)}},true);t(c,0,true);r.bind("slide",function(e,t){s.$setViewValue(t.values||t.value);n.$apply()});s.$render=function(){c();var e=u.range===true?"values":"value";if(!u.range&&isNaN(s.$viewValue)&&!(s.$viewValue instanceof Array)){s.$viewValue=0}else if(u.range&&!angular.isDefined(s.$viewValue)){s.$viewValue=[0,0]}if(u.range===true){if(angular.isDefined(u.min)&&u.min>s.$viewValue[0]){s.$viewValue[0]=u.min}if(angular.isDefined(u.max)&&u.max<s.$viewValue[1]){s.$viewValue[1]=u.max}if(s.$viewValue[0]>s.$viewValue[1]){if(a.min>=s.$viewValue[1])s.$viewValue[0]=a.min;if(a.max<=s.$viewValue[0])s.$viewValue[1]=a.max}a.min=s.$viewValue[0];a.max=s.$viewValue[1]}r.slider(e,s.$viewValue)};n.$watch(i.ngModel,function(){if(u.range===true){s.$render()}},true);r.bind("$destroy",h)}}}}])